aspect CallGraph{
	public class FuncAux implements Comparable<FuncAux> {

        protected FuncCall function;

		public FuncAux(FuncCall function) {
            this.function= function;
		}

		public int compareTo(FuncAux other) {
            return function.getIdUse().getID().compareTo(other.function.getIdUse().getID());
		}

		public FuncCall getIdUse(){
		    return function;
		}

		public String toString() {
		  return function.getIdUse().getID();
		}

	}
	protected FuncAux ASTNode.funcHelper(FuncCall usedFunc) {
		return new FuncAux(usedFunc);
	}


    coll Set<FuncAux> Function.functionCalls() [new TreeSet<FuncAux>()] with add root Function;


    inh Function ASTNode.enclosingFunction();
    eq Function.getChild().enclosingFunction() = this;

    FuncCall contributes funcHelper(this)
        to Function.functionCalls() for enclosingFunction();

}
