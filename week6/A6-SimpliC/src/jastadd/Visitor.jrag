/*
Program ::= Function*;
Function ::= <ID> Var* Block;

Block ::= Statement*;

abstract Statement;
IdDecl : Statement ::= <ID>;
ExpressionStatement : Statement ::= Expr;
IdUse : Statement ::= <ID> Expr;
While : Statement ::= Condition:Expr Do:Block;
IfElse    : Statement ::= Condition:Expr Then:Block Else:Block;
If    : Statement ::= Condition:Expr Then:Block;
Return : Statement ::= Expr;
CallStatement : Statement ::= FuncCall;

abstract Expr;

LT : Expr ::= Left:Expr Right:Expr;
GT : Expr ::= Left:Expr Right:Expr;
GTE : Expr ::= Left:Expr Right:Expr;
LTE : Expr ::= Left:Expr Right:Expr;
EQ : Expr ::= Left:Expr Right:Expr;
NEQ : Expr ::= Left:Expr Right:Expr;
Mul : Expr ::= Left:Expr Right:Expr;
Div : Expr ::= Left:Expr Right:Expr;
Plus : Expr ::= Left:Expr Right:Expr;
Mod : Expr ::= Left:Expr Right:Expr;
Minus : Expr ::= Left:Expr Right:Expr;
Numeral : Expr ::= <NUMERAL>;
Var     : Expr ::= <ID>;
FuncCall: Expr ::= <Name> Args:Expr*;
*/





aspect Visitor {
	/**
	 * Visitor interface for Calc language. Each concrete node type must
	 * have a visit method.
	 */
	public interface Visitor {
		public Object visit(LT node, Object data);
		public Object visit(GT node, Object data);
		public Object visit(GTE node, Object data);
		public Object visit(LTE node, Object data);
		public Object visit(EQ node, Object data);
		public Object visit(NEQ node, Object data);
		public Object visit(Mul node, Object data);
		public Object visit(Div node, Object data);
		public Object visit(Minus node, Object data);
		public Object visit(Plus node, Object data);
		public Object visit(Mod node, Object data);
		public Object visit(Numeral node, Object data);
		public Object visit(FuncCall node, Object data);

		public Object visit(CallStatement node, Object data);
		public Object visit(Return node, Object data);
		public Object visit(If node, Object data);
		public Object visit(IfElse node, Object data);
		public Object visit(While node, Object data);
		public Object visit(ExpressionStatement node, Object data);
		public Object visit(List node, Object data);
		public Object visit(Opt node, Object data);
		public Object visit(Program node, Object data);
		public Object visit(IdDecl node, Object data);
		public Object visit(IdUse node, Object data);
		public Object visit(Block node, Object data);
		public Object visit(Function node, Object data);
		public Object visit(Decl node, Object data);
		public Object visit(IntType node, Object data);
		public Object visit(BooleanType node, Object data);
				
		//public Object visit(Expr node, Object data);
	}

	//public Object Expr.accept(Visitor visitor, Object data){
	//	return visitor.visit(this, data);
	//}
	
	public Object IntType.accept(Visitor visitor, Object data){
		return visitor.visit(this, data);
	}
	
	public Object BooleanType.accept(Visitor visitor, Object data){
		return visitor.visit(this, data);
	}
	
	public Object Function.accept(Visitor visitor, Object data){
		return visitor.visit(this, data);
	}
	

	public Object Block.accept(Visitor visitor, Object data){
		return visitor.visit(this, data);
	}
	
	public Object Decl.accept(Visitor visitor, Object data){
	    return visitor.visit(this, data);
	}

	public Object ExpressionStatement.accept(Visitor visitor, Object data){
		return visitor.visit(this, data);
	}

	public Object While.accept(Visitor visitor, Object data){
		return visitor.visit(this, data);
	}

	public Object IfElse.accept(Visitor visitor, Object data){
		return visitor.visit(this, data);
	}

	public Object If.accept(Visitor visitor, Object data){
		return visitor.visit(this, data);
	}

	public Object Return.accept(Visitor visitor, Object data){
		return visitor.visit(this, data);
	}

	public Object CallStatement.accept(Visitor visitor, Object data){
		return visitor.visit(this, data);
	}

	public Object FuncCall.accept(Visitor visitor, Object data){
		return visitor.visit(this, data);
	}

	public Object Numeral.accept(Visitor visitor, Object data){
		return visitor.visit(this, data);
	}

	public Object Mod.accept(Visitor visitor, Object data){
		return visitor.visit(this, data);
	}

	public Object Plus.accept(Visitor visitor, Object data){
		return visitor.visit(this, data);
	}

	public Object Minus.accept(Visitor visitor, Object data){
		return visitor.visit(this, data);
	}

	public Object NEQ.accept(Visitor visitor, Object data){
		return visitor.visit(this, data);
	}

	public Object EQ.accept(Visitor visitor, Object data){
		return visitor.visit(this, data);
	}

	public Object LTE.accept(Visitor visitor, Object data){
		return visitor.visit(this, data);
	}

	public Object LT.accept(Visitor visitor, Object data){
		return visitor.visit(this, data);
	}

	public Object GT.accept(Visitor visitor, Object data){
		return visitor.visit(this, data);
	}

	public Object GTE.accept(Visitor visitor, Object data){
		return visitor.visit(this, data);
	}

	public Object ASTNode.accept(Visitor visitor, Object data) {
		throw new Error("Visitor: accept method not available for " + getClass().getName());
	}
	public Object List.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Opt.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Program.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Mul.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Div.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object IdDecl.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object IdUse.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
}
