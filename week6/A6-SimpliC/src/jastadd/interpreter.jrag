import java.util.HashMap;
import java.util.Scanner;

aspect Interpreter{

    public void Program.eval(){
        if(main() != null){
            main().eval(new ActivationRecord());
        }
        else{
        throw new RuntimeException("Main is not defined in program."); 
        }
    }

    public int Function.eval(ActivationRecord actrec){
        Block block = getBlock();
        return block.eval(actrec).getInt();
    }

    public WrappedInteger Block.eval(ActivationRecord actrec){
        WrappedInteger temp = new WrappedInteger(0, false);
        for(Statement statement : getStatementList()){
            temp = statement.eval(actrec);
            if(temp.getReturn()){
            //if(statement instanceof Return || temp.getReturn()){
                //return new WrappedInteger(temp.getInt(), true);
                return temp;
            } 
        }
        return temp;
    }

    //
    // STATEMENT EVALUATIONS!
    //

    public abstract WrappedInteger Statement.eval(ActivationRecord actrec);

    public WrappedInteger CallStatement.eval(ActivationRecord actrec){
        int temp = getFuncCall().eval(actrec);
        return new WrappedInteger(temp, false);
    }

    public WrappedInteger Return.eval(ActivationRecord actrec){
        int temp = getExpr().eval(actrec);
        return new WrappedInteger(temp, true);
    }
    
    public WrappedInteger ExpressionStatement.eval(ActivationRecord actrec){
        int temp = getExpr().eval(actrec);
        return new WrappedInteger(temp, false); 
    }

    public WrappedInteger Decl.eval(ActivationRecord actrec){
        //Decl : Statement ::= Type IdDecl [Expr];
        int temp = 0;
        if(hasExpr()){
            temp = getExpr().eval(actrec);
        }
        //put into activation record
        actrec.put(getIdDecl().uniqueID(), temp);
        
        return new WrappedInteger(0, false);
    }

    public WrappedInteger Assignment.eval(ActivationRecord actrec){
        IdDecl id = getIdUse().decl();
        String temp = getIdUse().decl().uniqueID();
        actrec.put(temp, getExpr().eval(actrec));

        return new WrappedInteger(0, false);
    }

    public WrappedInteger While.eval(ActivationRecord actrec){
        while(getCondition().eval(actrec) == 1){
            WrappedInteger temp = getDo().eval(actrec); 
            if(temp.getReturn()){
                return temp; 
            }
        }
        return new WrappedInteger(0,false); 
    }
    
    public WrappedInteger If.eval(ActivationRecord actrec){
        WrappedInteger temp;
        if(getCondition().eval(actrec) == 1){
            temp = getThen().eval(actrec);
            return temp;
        }
        return new WrappedInteger(0,false);
    }

    public WrappedInteger IfElse.eval(ActivationRecord actrec){
        if(getCondition().eval(actrec) == 1){
           return getThen().eval(actrec); 
        }
        else{
            return getElse().eval(actrec);
        }
    }
    
    //
    // EXPRESSION EVALUATIONS
    //

    public abstract int Expr.eval(ActivationRecord actrec);

    //Arithmetic expressions

    public int Mul.eval(ActivationRecord actrec){
        return getLeft().eval(actrec) * getRight().eval(actrec);
    }
    public int Div.eval(ActivationRecord actrec){
        return getLeft().eval(actrec) / getRight().eval(actrec);
    }
    public int Plus.eval(ActivationRecord actrec){
        return getLeft().eval(actrec) + getRight().eval(actrec);
    }
    public int Minus.eval(ActivationRecord actrec){
        return getLeft().eval(actrec) - getRight().eval(actrec);
    }
    public int Mod.eval(ActivationRecord actrec){
        return getLeft().eval(actrec) % getRight().eval(actrec);
    }

    //Boolean expressions
	public int GT.eval(ActivationRecord actrec) {
		return getLeft().eval(actrec) >  getRight().eval(actrec) ? 1 : 0;
	}
	public int LT.eval(ActivationRecord actrec) {
		return getLeft().eval(actrec) <  getRight().eval(actrec) ? 1 : 0;
	}	
	public int GTE.eval(ActivationRecord actrec) {
		return getLeft().eval(actrec) >= getRight().eval(actrec) ? 1 : 0;
	}
	public int LTE.eval(ActivationRecord actrec) {
		return getLeft().eval(actrec) <= getRight().eval(actrec) ? 1 : 0;
	}
	public int EQ.eval(ActivationRecord actrec) {
		return getLeft().eval(actrec) == getRight().eval(actrec) ? 1 : 0;
	}
	public int NEQ.eval(ActivationRecord actrec) {
		return getLeft().eval(actrec) != getRight().eval(actrec) ? 1 : 0;
    }
    
    //Other expressions

    public int Numeral.eval(ActivationRecord actrec){
	    return Integer.parseInt(getNUMERAL());
    }

    public int FuncCall.eval(ActivationRecord actrec){
        //get function as Java class (so we can call eval)
        String name = getIdUse().getID();
        if(!(name.equals("print") || name.equals("read"))){
            Function func = getFunctionAsJava(name);

            //bind local variables
            ActivationRecord actrecLocal = new ActivationRecord();
            for(int i = 0; i < func.getNumArguments(); i++){
            
                int argsToPass = getArgs(i).eval(actrec);
                actrecLocal.put(func.getArguments(i).uniqueName(func.getArguments(i).getID()),argsToPass); 

            }
            int temp_ = func.eval(actrecLocal);
            return temp_;
        }

        else if(getIdUse().getID().equals("print")){
            for(Expr expr: getArgsList()){
                int temp = expr.eval(actrec);
                System.out.println(temp);
            }
        }
        else if(getIdUse().getID().equals("read")){
            Scanner scan = new Scanner(System.in);
            System.out.print("=>> ");
            int value = Integer.parseInt(scan.nextLine());
            return value;
        }
        return 0;
    }
    
    public int IdUse.eval(ActivationRecord actrec){
        String temp = decl().uniqueID();
        return actrec.get(temp);
    }

    public int IdDecl.eval(ActivationRecord actrec){
        throw new RuntimeException("IdDecl evaluation not implemented!"); 
    }


    public class ActivationRecord{
        private HashMap<String,Integer> map;

        public ActivationRecord(){
            map = new HashMap<String,Integer>();
        }

        int get(String name){
            return map.get(name);
        }
        void put(String name, int value){
            map.put(name,value);
        }
    }

    public class WrappedInteger{
        
        int a;
        boolean ret;
    
        public WrappedInteger(int a, boolean ret){
            this.a = a;
            this.ret = ret;
        }

        public int getInt(){
            return this.a;
        }

        public boolean getReturn(){
            return this.ret;
        }
    }

    //Get main function
    syn Function Program.main() {
        for (Function f : getFunctionList()){
            if (f.getName().getID().equals("main")){
                return (Function) f;
            }
        }
        return null;
    }

    //Actually get the function defined

    inh Function ASTNode.getFunctionAsJava(String name);

    eq Program.getChild().getFunctionAsJava(String name){
        for(Function func : getFunctionList()){
            if(func.getName().getID().equals(name)){
                return func;
            }
        }
        return null; //Should never happen as all function definition are checked in the static analysis.
    }

}
