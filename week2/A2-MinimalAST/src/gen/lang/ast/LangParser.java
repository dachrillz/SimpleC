package lang.ast;

import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "parser.beaver".
 */
public class LangParser extends Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short ID = 1;
		static public final short INT = 2;
		static public final short LPAREN = 3;
		static public final short SEMICOLON = 4;
		static public final short PLUS = 5;
		static public final short NUMERAL = 6;
		static public final short RPAREN = 7;
		static public final short MUL = 8;
		static public final short RETURN = 9;
		static public final short RBRACE = 10;
		static public final short LBRACE = 11;
		static public final short EQUALS = 12;

		static public final String[] NAMES = {
			"EOF",
			"ID",
			"INT",
			"LPAREN",
			"SEMICOLON",
			"PLUS",
			"NUMERAL",
			"RPAREN",
			"MUL",
			"RETURN",
			"RBRACE",
			"LBRACE",
			"EQUALS"
		};
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9oLaZrJKr4GXjzmmqtu22GtNoeGHSMXOmPijALZnX$0s5dOsjZOECpOs3aMjZgM$ZY#8wX" +
		"0bcSt9vXHPCQxy#p7UtDEzkuvahvfGOkwexjcUg2ofZIlMNLLjWlr8DEofkt4JPDsJZnN9U" +
		"epDtMqY2$KZFgNct9LyVVGlFxfffeDY0FDHVt3JTBzy8hwr2sgv8d3NlpfXLyUTKi#O$lOT" +
		"molDaezlMtOiHspW$kXSiiExH05Rttha$NLjYCx8iFRWHsGuNrFCjzvp$R8t3$KaYRKjLrY" +
		"xweVtxc5ieJI3QMd9l6sQfgZypfvmRgMIlWCn6Gcr636qqah9Qqofldgd9EO7DCopVobZTQ" +
		"MVskSOLcvyOnhL3TfgLlo8lx1gT9H5MNswbjGgL6lKVu$Qz17asze4$DHFsdd4fR5j#JOS8" +
		"MqiXDZfr#nZ#XCJ5Pw55DMt8XduB$jG0FMOGCMO1i#fdkq0f$WENo6b$05li8hU0rlu2syW" +
		"$Um2clm59x09ZnEFUtG$i3pFq7d7chhkdTfxVPO$Y758iKN$rft4#afOhRDmEzS1IMB4$Ox" +
		"ERgNBM8TlKu#J$Jfr#8EbZYB8PrBkOdrYW==");

	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}

	public LangParser() {
		super(PARSING_TABLES);
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		switch(rule_num) {
			case 0: // program = programlist.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final List a = (List) _symbol_a.value;
					 return new Program(a);
			}
			case 1: // programlist = function.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Function a = (Function) _symbol_a.value;
					 return new List().add(a);
			}
			case 2: // programlist = programlist.a function.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final List a = (List) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 2];
					final Function b = (Function) _symbol_b.value;
					 return a.add(b);
			}
			case 3: // function = INT ID.id LPAREN RPAREN LBRACE statementlist.sl RBRACE
			{
					final Symbol id = _symbols[offset + 2];
					final Symbol _symbol_sl = _symbols[offset + 6];
					final List sl = (List) _symbol_sl.value;
					 return new Function(id, sl);
			}
			case 4: // statement = INT ID.a SEMICOLON
			{
					final Symbol a = _symbols[offset + 2];
					 return new IdDecl(a);
			}
			case 5: // statement = ID.a EQUALS expression.b SEMICOLON
			{
					final Symbol a = _symbols[offset + 1];
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new IdUse(a, b);
			}
			case 6: // statement = expression.a SEMICOLON
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					 return new ExpressionStatement(a);
			}
			case 7: // statement = RETURN SEMICOLON
			{
					 return new Return();
			}
			case 8: // statementlist = statement.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Statement a = (Statement) _symbol_a.value;
					 return new List().add(a);
			}
			case 9: // statementlist = statementlist.a statement.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final List a = (List) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 2];
					final Statement b = (Statement) _symbol_b.value;
					 return a.add(b);
			}
			case 10: // expression = expression.a PLUS term.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Plus(a,b);
			}
			case 11: // expression = term.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					 return a;
			}
			case 12: // term = term.a MUL factor.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Mul(a,b);
			}
			case 13: // term = factor.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					 return a;
			}
			case 14: // factor = LPAREN expression.a RPAREN
			{
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expr a = (Expr) _symbol_a.value;
					 return a;
			}
			case 15: // factor = op.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					 return a;
			}
			case 16: // op = ID.a
			{
					final Symbol a = _symbols[offset + 1];
					 return new Var(a);
			}
			case 17: // op = NUMERAL.a
			{
					final Symbol a = _symbols[offset + 1];
					 return new Numeral(a);
			}
			default:
				throw new IllegalArgumentException("unknown production #" + rule_num);
		}
	}
}
