aspect NameAnalysis {
	syn IdDecl IdUse.decl() = lookup(getID());

	inh IdDecl IdUse.lookup(String name);

	eq Program.getFunction(int i).lookup(String name) = unknownDecl();
	inh IdDecl Function.lookup(String name);

    eq Function.getBlock().lookup(String name){
        IdDecl loc = localLookup(name);
        return loc.isUnknown() ? lookup(name) : loc;
    }

    syn IdDecl Function.localLookup(String name){
        for(IdDecl id : getArgumentss()){ //omg did the extra s take a long time to find...
            if(id.getID().equals(name)){
                return id;
            }
        }
        return unknownDecl();
    }

    inh IdDecl Block.lookup(String name);

    eq Block.getStatement(int i ).lookup(String name){
        IdDecl id = localLookup(name, i);
        return id.isUnknown() ? lookup(name) : id;
    }

    syn IdDecl Block.localLookup(String name, int i) {
        for(int j = 0; j < i; j++){
            IdDecl id = getStatement(j).lookup(name);
            if(id != null){
                return id;
            }
        }
        return unknownDecl();
    }
    
    syn IdDecl Statement.lookup(String name){
        return null;
    }

    syn IdDecl Decl.lookup(String name){
       IdDecl id = getIdDecl();
       return id.getID().equals(name) ? id : null;
    }

    inh IdDecl IdDecl.lookup(String name);

    //
    //Check multi declaration
    //

    //All nodes uses a isMulti attribute
    inh boolean ASTNode.isMulti(String name);

    //equations for inherited attributes
    eq Program.getFunction(int i).isMulti(String name) {
        for(Function func : predefinedFunctions()){
            if(func.getName().getID().equals(name)){
                return true;
            }
        }
        for(int k = 0; k < i; k++){
            if(getFunction(k).getName().getID().equals(name)) {
                return true;
            }
        }
        //if no match
        return false;
    }
    
    eq Function.getBlock().isMulti(String name){
        for(IdDecl id : getArgumentss()){
            if(id.getID().equals(name)){
                return true;
            }
        }
        return false;
    }

    eq Block.getStatement(int i).isMulti(String name){
        for(int j = 0; j < i; j++){
            if(getStatement(j).isMulti(name)){
                return true;
            }
        }
        return isMulti(name);
    }

    eq Program.getChild().isMulti(String name){
        return false;
    }

    //Some synthesised attributes

    syn boolean Decl.isMulti(String name){
        return getIdDecl().getID().equals(name);
    }

    syn boolean IdDecl.isMultiDeclared(){
        return isMulti(getID());
        /*
        {
            return true;
        }
        else{
            return false;
        }
        */
    }

    //
    //Function declarations
    //
    eq Program.getChild().functionDeclaration(String name){
        for(Function func : predefinedFunctions()){
            if(func.getName().getID().equals(name)){
                return func.getName();
            }
        }
        for(Function func : getFunctionList()){
            IdDecl id = func.getName();
            if(id.getID().equals(name)){
                return id;
            }
        }
        return unknownDecl();
    }
    
    inh IdDecl ASTNode.functionDeclaration(String name);
    eq FuncCall.getIdUse().lookup(String name) {
        return functionDeclaration(name);
    }

    //
    // The pre defined functions
    //

    syn nta List<Function> Program.predefinedFunctions() {
        List<Function> list = new List<Function>();

        // Create objects of type FunctionDecl and add them to the list
        Function read = new Function(new IntType(), new IdDecl("read"), new List(), new Block());
        List<IdDecl> printArguments = new List<IdDecl>();
        printArguments.add(new IdDecl("printarg"));
        Function print = new Function(new IntType(), new IdDecl("print"), printArguments, new Block());

        list.add(read);
        list.add(print);

        return list;
    }

} 
