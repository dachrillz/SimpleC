
//There are three types in SimpliC: integer, boolean, unknown type.  
//Variables, parameters and the return type of a function can only be of integer type.  
// Arithmetic expressions are of type integer
//Boolean expressions are of type boolean.  
//The statements if and while require the condition to be of type boolean. 
//The unknown type is assigned to variable uses that refer to unknown names.  

aspect TypeAnalysis{

	syn Type Expr.type();
	eq Numeral.type() = intType();
	eq IdUse.type() = decl().type();
	syn Type IdDecl.type() = intType();
	eq FuncCall.type() = getIdUse().type();
	
	//arithmetic expressions (wish i made them binop before this lol)
	/*
    Mul : Expr ::= Left:Expr Right:Expr;
    Div : Expr ::= Left:Expr Right:Expr;
    Plus : Expr ::= Left:Expr Right:Expr;
    Mod : Expr ::= Left:Expr Right:Expr;
    Minus : Expr ::= Left:Expr Right:Expr;
	*/
	eq Mul.type(){
		Type left = getLeft().type();
		Type right = getRight().type();
		if(left.compatibleType(right)){
			return intType();
		}
		return unknownType();
	}
	eq Div.type(){
		Type left = getLeft().type();
		Type right = getRight().type();
		if(left.compatibleType(right)){
			return intType();
		}
		return unknownType();
	}
	eq Plus.type(){
		Type left = getLeft().type();
		Type right = getRight().type();
		if(left.compatibleType(right)){
			return intType();
		}
		return unknownType();
	}
	eq Mod.type(){
		Type left = getLeft().type();
		Type right = getRight().type();
		if(left.compatibleType(right)){
			return intType();
		}
		return unknownType();
	}
	eq Minus.type(){
		Type left = getLeft().type();
		Type right = getRight().type();
		if(left.compatibleType(right)){
			return intType();
		}
		return unknownType();
	}
	
	/*
	//These guys
	LT : Expr ::= Left:Expr Right:Expr;
    GT : Expr ::= Left:Expr Right:Expr;
    GTE : Expr ::= Left:Expr Right:Expr;
    LTE : Expr ::= Left:Expr Right:Expr;
    EQ : Expr ::= Left:Expr Right:Expr;
    NEQ : Expr ::= Left:Expr Right:Expr;
    */
    eq LT.type(){
        Type left = getLeft().type();
        Type right = getRight().type();
        
        if(left.compatibleType(right)){
            return booleanType();
        }
        return unknownType();
    
    }
    eq GT.type(){
        Type left = getLeft().type();
        Type right = getRight().type();
        
        if(left.compatibleType(right)){
            return booleanType();
        }
        return unknownType();
    
    }
    eq GTE.type(){
        Type left = getLeft().type();
        Type right = getRight().type();
        
        if(left.compatibleType(right)){
            return booleanType();
        }
        return unknownType();
    
    }
    eq LTE.type(){
        Type left = getLeft().type();
        Type right = getRight().type();
        
        if(left.compatibleType(right)){
            return booleanType();
        }
        return unknownType();
    
    }
    eq EQ.type(){
        Type left = getLeft().type();
        Type right = getRight().type();
        
        if(left.compatibleType(right)){
            return booleanType();
        }
        return unknownType();
    
    }
    eq NEQ.type(){
        Type left = getLeft().type();
        Type right = getRight().type();
        
        if(left.compatibleType(right)){
            return booleanType();
        }
        return unknownType();
    
    }
      
    
    //Compatible types
    //We use this instead of isequals
	syn boolean Type.compatibleType(Type t){
		return this.equals(t);
	}
	
	syn boolean Assignment.compatibleTypes() = getExpr().expectedType().compatibleType(getExpr().type());
	
	syn boolean Decl.compatibleTypes() {
		if(hasExpr()) {
			return getExpr().expectedType().compatibleType(getExpr().type());
		}
		return true;
	}
	
	//if, ifelse, while
	syn boolean If.compatibleTypes(){
	    return getCondition().expectedType().compatibleType(getCondition().type());
	}
	syn boolean IfElse.compatibleTypes(){
	    return getCondition().expectedType().compatibleType(getCondition().type());
	}
	syn boolean While.compatibleTypes(){
	    return getCondition().expectedType().compatibleType(getCondition().type());
	}
	
	
	//expected types
	inh Type Expr.expectedType();
	eq Assignment.getExpr().expectedType() = intType();
	eq Decl.getExpr().expectedType() = intType();
	eq If.getCondition().expectedType() = booleanType();
	eq IfElse.getCondition().expectedType() = booleanType();
    eq While.getCondition().expectedType() = booleanType();
    
    
    //check if variable/function
    inh boolean IdDecl.isVariable();
    inh boolean IdDecl.isFunction();
    
    //variable attributes
	eq Decl.getIdDecl().isVariable() = true;
	eq Program.getChild().isVariable() = false;
	
	//function attributes
	eq Function.getName().isFunction() = true;
	eq Program.getChild().isFunction() = false;
    syn boolean IdUse.isFunction() = false;
	eq FuncCall.getIdUse().isFunction() = true;
	
	syn boolean IdDecl.isVariableAndFunction() = functionDeclaration(getID()).isFunction() && this.isVariable();
	
	//check correct amount of parameters
	inh Function IdDecl.function();
	eq Function.getName().function() = this;
	
	syn boolean FuncCall.hasAllParameters() = getIdUse().decl().equalsParameters(this);
	
	syn boolean IdDecl.equalsParameters(FuncCall call){
	    if(function().getNumArguments() == call.getNumArgs()){
	        return true;
	    }
	    else{
	        return false;
	    }
	}
		
}
