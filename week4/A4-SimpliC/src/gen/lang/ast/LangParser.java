package lang.ast;

import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "parser.beaver".
 */
public class LangParser extends Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short LPAREN = 1;
		static public final short RPAREN = 2;
		static public final short ID = 3;
		static public final short NUMERAL = 4;
		static public final short COMMA = 5;
		static public final short LT = 6;
		static public final short GT = 7;
		static public final short GTE = 8;
		static public final short LTE = 9;
		static public final short EQ = 10;
		static public final short NEQ = 11;
		static public final short SEMICOLON = 12;
		static public final short INT = 13;
		static public final short PLUS = 14;
		static public final short MINUS = 15;
		static public final short MUL = 16;
		static public final short DIV = 17;
		static public final short MOD = 18;
		static public final short IF = 19;
		static public final short WHILE = 20;
		static public final short RETURN = 21;
		static public final short RBRACE = 22;
		static public final short LBRACE = 23;
		static public final short EQUALS = 24;
		static public final short ELSE = 25;

		static public final String[] NAMES = {
			"EOF",
			"LPAREN",
			"RPAREN",
			"ID",
			"NUMERAL",
			"COMMA",
			"LT",
			"GT",
			"GTE",
			"LTE",
			"EQ",
			"NEQ",
			"SEMICOLON",
			"INT",
			"PLUS",
			"MINUS",
			"MUL",
			"DIV",
			"MOD",
			"IF",
			"WHILE",
			"RETURN",
			"RBRACE",
			"LBRACE",
			"EQUALS",
			"ELSE"
		};
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pLbbjiLKKKXjVUfwUrm87MIc#sM5hQqaAz5C5BlN4HGK054GHz9D7462CFHarK7dmH7$H" +
		"5NqnCV3SnySbeH5zyC4QDoiK2XHOeK2vjwOK20kCtwymvdTcqDWOIurbPyw$vrpzhpvwzzv" +
		"mHIQNDd#QW54ZA70nD7lJYj6oL4jChHQXxGvDIRIkbJkuqHwHGffaZeKcnrpiciwXyB3Hfr" +
		"ZPReqUMKwCdD5dfzRfa5Ogkq6IDrpiWqsITEH2QFEFrziicvh4$DDdizVPHOulP5vg8rpig" +
		"$CpHqBACkvTkLNI75Z27LN4uj83PgugzeGNC8LKS2YrWpgZYJC9EIxdCCQSJTahPKmdhKxO" +
		"lOIULFPcm4ygUIDXnPO#7nhGiEsR6c9zj7v9sgPT6kKFkaoUa6gP1vab6chFvhDB62MMJL6" +
		"dlQPBFoiCo7MOylz0CoIOpH5ij7LfHP3vU3PFjsPf3pepCbBNcBCnPsiTacJmbCrHIOCx3d" +
		"SUkw8YppaPXHiseSbSqZn6FvcTHOVEg2UR5W9lG$I4RPG7jBL8ZRR985iizPiHSnaVCCFbX" +
		"sYQPQyUP4VgNBOUFE1jsTWxk73O83j9Mo$ts$YmlBPQJLishnja0$03M3$RJDibTUXtBxrP" +
		"kj#PLapNgYgwRVoytmytCCxUvTVFkICe2$QtoG7RT0uslU2J8B0roA#JHAKQlbiSdKFZnau" +
		"5#VP3RuELcUt6j5z$knNTxyH8lljTqcavvZZUjKrSiDd#nfh$JowrX3eLCJfNCtJ0qL$Lzs" +
		"6CkcWkklQHlxIKoaSHyQGtizeLIn7jPp0uudJS$nNET9ILIoZEkfyeCTCtiS4bTfQUBgLPn" +
		"ZM9keAYdSb8H$SiQKoigw2SLym95Pe9vr4zLGtU9lCBm#$ygk4Eh#4zPDqkHY2Z5YQIQ7QA" +
		"6xsqEUqaTppcZRAFco$XMPqkvtajLGfdhDPABUITR9gaKyPM2g5fnnnhzvUepcmprSpFohv" +
		"h9rv5WX5U7A3#2U7mMEMqmBpjRdN6QUOLh4p4FdN5YPJAshlDSpVmyd3QFLBQOSTV9S8sfn" +
		"lZNcMfCybwklT$m7GYVIUpMtTU4YkiRFP7YdofEdhkUs3w31jgqhjXy##R80hldXUlktgxA" +
		"yFdTQ7JlLAoMLilj3Hbop#yGVRCvqqJluP$GBSQRY5$0Tn6NWZ#Bn5NWM$Wo$7tu9TbJJVG" +
		"nleuy9u$eC$mrU4ucyPTW6VWDoFzU$1tUWVz0dt$7#4TmCKXjMOblrdc9l8Y$WI#b5gUpQ8" +
		"Xu9xhVSCvdqVVW7h0Gdld6dU3d#BV4NV3CD#u1Qy1Ua3Dbr4x#5$eNGCxTyHTm6y0#V1NnJ" +
		"$1WpFNYhSIBu7u5jz3dL1M$HBm2RZku4QHk$2fenxDsyJjsGmDJv5y1Bu9lWlPVb$M8lyAl" +
		"ucCxzAWIVy2jThkr7tGuaCr9IHPrdTjixFZoyJWkyEBjJl#HmzMEht7ukiECot#T6vjqkoP" +
		"U$AbtZRSzlj$ZttMuq#67azLs#RP4lyFTMxl7hNNSSeTh4cEsXNrPxt2RmvSJUVjhumkC#1" +
		"Qjsw#pKCy$pVIR#Juuh$7Fd#9VnteQBt1elGYFDTU2leMuZdXYZ$Z#KyuZTeEKvn5xH0gFs" +
		"2d6lHwlnckvPYtvLk9Mi0bS#3VSZIPD");

	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}

	public LangParser() {
		super(PARSING_TABLES);
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		switch(rule_num) {
			case 0: // program = programlist.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final List a = (List) _symbol_a.value;
					 return new Program(a);
			}
			case 1: // programlist = function.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Function a = (Function) _symbol_a.value;
					 return new List().add(a);
			}
			case 2: // programlist = programlist.a function.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final List a = (List) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 2];
					final Function b = (Function) _symbol_b.value;
					 return a.add(b);
			}
			case 3: // function = INT iddecl.id LPAREN functionarguments.arg RPAREN block.sl
			{
					final Symbol _symbol_id = _symbols[offset + 2];
					final IdDecl id = (IdDecl) _symbol_id.value;
					final Symbol _symbol_arg = _symbols[offset + 4];
					final List arg = (List) _symbol_arg.value;
					final Symbol _symbol_sl = _symbols[offset + 6];
					final Block sl = (Block) _symbol_sl.value;
					 return new Function(id, arg, sl);
			}
			case 4: // function = INT iddecl.id LPAREN RPAREN block.sl
			{
					final Symbol _symbol_id = _symbols[offset + 2];
					final IdDecl id = (IdDecl) _symbol_id.value;
					final Symbol _symbol_sl = _symbols[offset + 5];
					final Block sl = (Block) _symbol_sl.value;
					 return new Function(id, new List(), sl);
			}
			case 5: // functionarguments = functionargument.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final IdDecl a = (IdDecl) _symbol_a.value;
					 return new List().add(a);
			}
			case 6: // functionarguments = functionarguments.a COMMA functionargument.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final List a = (List) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final IdDecl b = (IdDecl) _symbol_b.value;
					 return a.add(b);
			}
			case 7: // functionargument = INT iddecl.a
			{
					final Symbol _symbol_a = _symbols[offset + 2];
					final IdDecl a = (IdDecl) _symbol_a.value;
					 return a;
			}
			case 8: // block = LBRACE statementlist.a RBRACE
			{
					final Symbol _symbol_a = _symbols[offset + 2];
					final List a = (List) _symbol_a.value;
					 return new Block(a);
			}
			case 9: // statement = INT iddecl.a SEMICOLON
			{
					final Symbol _symbol_a = _symbols[offset + 2];
					final IdDecl a = (IdDecl) _symbol_a.value;
					 return new Decl(a, new Opt());
			}
			case 10: // statement = INT iddecl.a EQUALS expr.b SEMICOLON
			{
					final Symbol _symbol_a = _symbols[offset + 2];
					final IdDecl a = (IdDecl) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 4];
					final Expr b = (Expr) _symbol_b.value;
					 return new Decl(a,new Opt(b));
			}
			case 11: // statement = iduse.a EQUALS expr.b SEMICOLON
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final IdUse a = (IdUse) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Assignment(a, b);
			}
			case 12: // statement = WHILE LPAREN expr.a RPAREN block.b
			{
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final Block b = (Block) _symbol_b.value;
					 return new While(a,b);
			}
			case 13: // statement = IF LPAREN expr.a RPAREN block.b
			{
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final Block b = (Block) _symbol_b.value;
					 return new If(a,b);
			}
			case 14: // statement = IF LPAREN expr.a RPAREN block.b ELSE block.c
			{
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final Block b = (Block) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 7];
					final Block c = (Block) _symbol_c.value;
					 return new IfElse(a,b,c);
			}
			case 15: // statement = expr.a SEMICOLON
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					 return new ExpressionStatement(a);
			}
			case 16: // statement = RETURN expr.a SEMICOLON
			{
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expr a = (Expr) _symbol_a.value;
					 return new Return(a);
			}
			case 17: // statementlist = statement.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Statement a = (Statement) _symbol_a.value;
					 return new List().add(a);
			}
			case 18: // statementlist = statementlist.a statement.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final List a = (List) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 2];
					final Statement b = (Statement) _symbol_b.value;
					 return a.add(b);
			}
			case 19: // expr = expr.a LT arexpr.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new LT(a,b);
			}
			case 20: // expr = expr.a GT arexpr.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new GT(a,b);
			}
			case 21: // expr = expr.a GTE arexpr.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new GTE(a,b);
			}
			case 22: // expr = expr.a LTE arexpr.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new LTE(a,b);
			}
			case 23: // expr = expr.a EQ arexpr.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new EQ(a,b);
			}
			case 24: // expr = expr.a NEQ arexpr.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new NEQ(a,b);
			}
			case 25: // expr = arexpr.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					 return a;
			}
			case 26: // arexpr = arexpr.a PLUS term.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Plus(a,b);
			}
			case 27: // arexpr = arexpr.a MINUS term.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Minus(a,b);
			}
			case 28: // arexpr = term.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					 return a;
			}
			case 29: // term = term.a MUL factor.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Mul(a,b);
			}
			case 30: // term = term.a DIV factor.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Div(a,b);
			}
			case 31: // term = term.a MOD factor.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Mod(a,b);
			}
			case 32: // term = factor.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					 return a;
			}
			case 33: // factor = LPAREN expr.a RPAREN
			{
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expr a = (Expr) _symbol_a.value;
					 return a;
			}
			case 34: // factor = op.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					 return a;
			}
			case 35: // op = ID.id
			{
					final Symbol id = _symbols[offset + 1];
					 return new IdUse(id);
			}
			case 36: // op = NUMERAL.a
			{
					final Symbol a = _symbols[offset + 1];
					 return new Numeral(a);
			}
			case 37: // op = functioncall.a
			{
					final Symbol a = _symbols[offset + 1];
					 return a;
			}
			case 38: // iddecl = ID.id
			{
					final Symbol id = _symbols[offset + 1];
					 	return new IdDecl(id);
			}
			case 39: // iduse = ID.id
			{
					final Symbol id = _symbols[offset + 1];
					 	return new IdUse(id);
			}
			case 40: // functioncall = iduse.a LPAREN argumentcalls.args RPAREN
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final IdUse a = (IdUse) _symbol_a.value;
					final Symbol _symbol_args = _symbols[offset + 3];
					final List args = (List) _symbol_args.value;
					 return new FuncCall(a, args);
			}
			case 41: // functioncall = iduse.a LPAREN RPAREN
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final IdUse a = (IdUse) _symbol_a.value;
					 return new FuncCall(a, new List());
			}
			case 42: // argumentcalls = argumentcall.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					 return new List().add(a);
			}
			case 43: // argumentcalls = argumentcalls.a COMMA argumentcall.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final List a = (List) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return a.add(b);
			}
			case 44: // argumentcall = expr.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					 return a;
			}
			default:
				throw new IllegalArgumentException("unknown production #" + rule_num);
		}
	}
}
