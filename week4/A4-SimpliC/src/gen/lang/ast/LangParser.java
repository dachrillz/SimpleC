package lang.ast;

import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "parser.beaver".
 */
public class LangParser extends Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short LPAREN = 1;
		static public final short RPAREN = 2;
		static public final short ID = 3;
		static public final short NUMERAL = 4;
		static public final short COMMA = 5;
		static public final short LT = 6;
		static public final short GT = 7;
		static public final short GTE = 8;
		static public final short LTE = 9;
		static public final short EQ = 10;
		static public final short NEQ = 11;
		static public final short SEMICOLON = 12;
		static public final short PLUS = 13;
		static public final short MINUS = 14;
		static public final short INT = 15;
		static public final short MUL = 16;
		static public final short DIV = 17;
		static public final short MOD = 18;
		static public final short IF = 19;
		static public final short WHILE = 20;
		static public final short RETURN = 21;
		static public final short RBRACE = 22;
		static public final short LBRACE = 23;
		static public final short EQUALS = 24;
		static public final short ELSE = 25;

		static public final String[] NAMES = {
			"EOF",
			"LPAREN",
			"RPAREN",
			"ID",
			"NUMERAL",
			"COMMA",
			"LT",
			"GT",
			"GTE",
			"LTE",
			"EQ",
			"NEQ",
			"SEMICOLON",
			"PLUS",
			"MINUS",
			"INT",
			"MUL",
			"DIV",
			"MOD",
			"IF",
			"WHILE",
			"RETURN",
			"RBRACE",
			"LBRACE",
			"EQUALS",
			"ELSE"
		};
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pDLabi74KKVLNZYKcSP6pY46TmWWTls4b8SDYta9Yin80XO23aH3W0GaX1W9GB4K8WBXo" +
		"GG5oGk73Wn24I23Xmu00I1wIOn6HVd3rUCcF7PdNnglfFJ$Lq3y4IHFJJx$Vh$r$Llwgwgp" +
		"#Wnz5Y3g4MLUPG7AWJxHHIkDkSYWDfDA09oym9pC0iSo8Ep1Jj938SusGSk5V6E8ur7EDu7" +
		"5Whsc6iPyJXEB19j07CmcOp40SU4sqGZpEFmJZG9taSunXFccDn0A8T12zpC8xGUi1578WZ" +
		"j1vr4KVZ2AtxNCI#E4Bh4Mh678c3knfmmhwoJy0BSJrMc24yONusGr7W6Yms5xXIC1UYS9x" +
		"pBhFpKJZFEUSv5uNpd7MUir4upnddEHE5yvnsdjDHEC#acQJ7tN6JdGUMudRq8EVcD8bxCC" +
		"VyQVqEVvZVQVFYJ87UWYamxb7hHHOrU0JBpNwYm97tKme1C9Uj1x0Lwx0Q3s6s6OOsmyGUs" +
		"gzYt0Isc0dUWInzpLXEsx1W0ZUwZ2O4b$2KkKJqevfH$QX78phHXPjnAtrsjbFEJtZvTfXn" +
		"UiQ9AMPwfts66KEh6UCzIr$mp751dlQyoTCo9hX8$IBlMLg3sBnWbFPHCnhu7KQeZ$2UfJM" +
		"87Gr0ouXTey3lOeePpiTS15UmHjwiC0ztYS#tUdFpzAjnGoJgFjoVq7TZWitN7uoqUhtnh$" +
		"NqLPxUxUaRFFtXK5yKQaj2RMMetH9gjucsGFWwxjSTRXsppFXAS9lvoUn5kxsRNyqlvhVW3" +
		"WMDsJo3qpofg$dUpkGfLqFB7EvT0$y0TLnzpPnJYH6vC49nRaaHJM54hi8O3TCOu$8H2wWd" +
		"HJI74PdBpgN26COK8tYwclz717StQIvA8Z9$qplBzxwHizNSWQGnk5B9pw#SsHNp08gU5Fz" +
		"ZHkQn28lTLsNr35hGofXv$EBdyxzWhuMHEENUWYeNbo4KpnlRLiLPKugzCtoc$ISMsugdaO" +
		"rTmdMpEw2OOP29Z1hf6porrBVPzTNy4ijdbd6pBMKToJUOhSkqJJBj52v$Pe95Ul$RiQKCN" +
		"UwX9xfVMdo#DRvdWTxs3$ecsQAzegrApvgUFbsjoFQDSkjPNDV$cBL3si7NWQTtmTM5h1d0" +
		"cbMzIAvpVmUQsVw8p2zBxG1qFVaDobRAXxIlP3zMCkfZoYVqjv0$fmpGDqMsLMijsTOgEVf" +
		"hAAm8z6xQhFu5xLtahydTb2t1kwu$ezXgxbdoDnJMVEfByhVa1jfVfVuT#MsApUDJobUq$K" +
		"0$lt3z8zcEsqzUHTbCFttQLfMiQDLRv0wscQTUm$OUjjTIPqMkUwYleCrMxQneDUUW#wYlf" +
		"cqdkPVCSVGsCgicFKZPJftp1IjTpKeDpvE7oA#HXyalqq$Hh9RKzxlSmQDsSAfvMVifiRqV" +
		"C6gbRTTvlTN5Nb$ITRkdLmc$At63qkuJVaNuFHctfzXNshkziNAUljEB#S3l8$xNXTyKVgS" +
		"yfYn#Mrdx6SctoxCz9xPkuOrbVLwAZujUuUt2BvJvxRMC9xCzewtOocK69OrsjjlvXJJJra" +
		"HkTPAcL0bRgQPev#jm$mJDCo1LGHI$zfI8ufUUyaJn#qzH54#1akGeBPH6FhEH$auvnTl8I" +
		"$y2oCud40==");

	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}

	public LangParser() {
		super(PARSING_TABLES);
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		switch(rule_num) {
			case 0: // program = programlist.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final List a = (List) _symbol_a.value;
					 return new Program(a);
			}
			case 1: // programlist = function.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Function a = (Function) _symbol_a.value;
					 return new List().add(a);
			}
			case 2: // programlist = programlist.a function.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final List a = (List) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 2];
					final Function b = (Function) _symbol_b.value;
					 return a.add(b);
			}
			case 3: // function = INT iddecl.id LPAREN functionarguments.arg RPAREN block.sl
			{
					final Symbol _symbol_id = _symbols[offset + 2];
					final IdDecl id = (IdDecl) _symbol_id.value;
					final Symbol _symbol_arg = _symbols[offset + 4];
					final List arg = (List) _symbol_arg.value;
					final Symbol _symbol_sl = _symbols[offset + 6];
					final Block sl = (Block) _symbol_sl.value;
					 return new Function(id, arg, sl);
			}
			case 4: // function = INT iddecl.id LPAREN RPAREN block.sl
			{
					final Symbol _symbol_id = _symbols[offset + 2];
					final IdDecl id = (IdDecl) _symbol_id.value;
					final Symbol _symbol_sl = _symbols[offset + 5];
					final Block sl = (Block) _symbol_sl.value;
					 return new Function(id, new List(), sl);
			}
			case 5: // functionarguments = functionargument.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final IdDecl a = (IdDecl) _symbol_a.value;
					 return new List().add(a);
			}
			case 6: // functionarguments = functionarguments.a COMMA functionargument.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final List a = (List) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final IdDecl b = (IdDecl) _symbol_b.value;
					 return a.add(b);
			}
			case 7: // functionargument = INT iddecl.a
			{
					final Symbol _symbol_a = _symbols[offset + 2];
					final IdDecl a = (IdDecl) _symbol_a.value;
					 return a;
			}
			case 8: // block = LBRACE statementlist.a RBRACE
			{
					final Symbol _symbol_a = _symbols[offset + 2];
					final List a = (List) _symbol_a.value;
					 return new Block(a);
			}
			case 9: // statement = INT iddecl.a SEMICOLON
			{
					final Symbol _symbol_a = _symbols[offset + 2];
					final IdDecl a = (IdDecl) _symbol_a.value;
					 return new Decl(a, new Opt());
			}
			case 10: // statement = INT iddecl.a EQUALS expr.b SEMICOLON
			{
					final Symbol _symbol_a = _symbols[offset + 2];
					final IdDecl a = (IdDecl) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 4];
					final Expr b = (Expr) _symbol_b.value;
					 return new Decl(a,new Opt(b));
			}
			case 11: // statement = iduse.a EQUALS expr.b SEMICOLON
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final IdUse a = (IdUse) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Assignment(a, b);
			}
			case 12: // statement = WHILE LPAREN expr.a RPAREN block.b
			{
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final Block b = (Block) _symbol_b.value;
					 return new While(a,b);
			}
			case 13: // statement = IF LPAREN expr.a RPAREN block.b
			{
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final Block b = (Block) _symbol_b.value;
					 return new If(a,b);
			}
			case 14: // statement = IF LPAREN expr.a RPAREN block.b ELSE block.c
			{
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final Block b = (Block) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 7];
					final Block c = (Block) _symbol_c.value;
					 return new IfElse(a,b,c);
			}
			case 15: // statement = expr.a SEMICOLON
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					 return new ExpressionStatement(a);
			}
			case 16: // statement = RETURN expr.a SEMICOLON
			{
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expr a = (Expr) _symbol_a.value;
					 return new Return(a);
			}
			case 17: // statementlist = statement.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Statement a = (Statement) _symbol_a.value;
					 return new List().add(a);
			}
			case 18: // statementlist = statementlist.a statement.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final List a = (List) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 2];
					final Statement b = (Statement) _symbol_b.value;
					 return a.add(b);
			}
			case 19: // expr = expr.a LT arexpr.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new LT(a,b);
			}
			case 20: // expr = expr.a GT arexpr.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new GT(a,b);
			}
			case 21: // expr = expr.a GTE arexpr.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new GTE(a,b);
			}
			case 22: // expr = expr.a LTE arexpr.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new LTE(a,b);
			}
			case 23: // expr = expr.a EQ arexpr.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new EQ(a,b);
			}
			case 24: // expr = expr.a NEQ arexpr.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new NEQ(a,b);
			}
			case 25: // expr = arexpr.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					 return a;
			}
			case 26: // arexpr = arexpr.a PLUS term.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Plus(a,b);
			}
			case 27: // arexpr = arexpr.a MINUS term.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Minus(a,b);
			}
			case 28: // arexpr = term.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					 return a;
			}
			case 29: // term = term.a MUL factor.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Mul(a,b);
			}
			case 30: // term = term.a DIV factor.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Div(a,b);
			}
			case 31: // term = term.a MOD factor.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Mod(a,b);
			}
			case 32: // term = factor.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					 return a;
			}
			case 33: // factor = LPAREN expr.a RPAREN
			{
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expr a = (Expr) _symbol_a.value;
					 return a;
			}
			case 34: // factor = op.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					 return a;
			}
			case 35: // op = ID.id
			{
					final Symbol id = _symbols[offset + 1];
					 return new Var(id);
			}
			case 36: // op = NUMERAL.a
			{
					final Symbol a = _symbols[offset + 1];
					 return new Numeral(a);
			}
			case 37: // op = functioncall.a
			{
					final Symbol a = _symbols[offset + 1];
					 return a;
			}
			case 38: // iddecl = ID.id
			{
					final Symbol id = _symbols[offset + 1];
					 	return new IdDecl(id);
			}
			case 39: // iduse = ID.id
			{
					final Symbol id = _symbols[offset + 1];
					 	return new IdUse(id);
			}
			case 40: // functioncall = ID.a LPAREN argumentcalls.args RPAREN
			{
					final Symbol a = _symbols[offset + 1];
					final Symbol _symbol_args = _symbols[offset + 3];
					final List args = (List) _symbol_args.value;
					 return new FuncCall(a, args);
			}
			case 41: // functioncall = ID.a LPAREN RPAREN
			{
					final Symbol a = _symbols[offset + 1];
					 return new FuncCall(a, new List());
			}
			case 42: // argumentcalls = argumentcall.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					 return new List().add(a);
			}
			case 43: // argumentcalls = argumentcalls.a COMMA argumentcall.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final List a = (List) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return a.add(b);
			}
			case 44: // argumentcall = expr.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					 return a;
			}
			default:
				throw new IllegalArgumentException("unknown production #" + rule_num);
		}
	}
}
