package lang.ast;

import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "parser.beaver".
 */
public class LangParser extends Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short ID = 1;
		static public final short IN = 2;
		static public final short MUL = 3;
		static public final short DIV = 4;
		static public final short RBRACKET = 5;
		static public final short END = 6;
		static public final short ASK = 7;
		static public final short LET = 8;
		static public final short NUMERAL = 9;
		static public final short ASSIGN = 10;
		static public final short USER = 11;
		static public final short LBRACKET = 12;

		static public final String[] NAMES = {
			"EOF",
			"ID",
			"IN",
			"MUL",
			"DIV",
			"RBRACKET",
			"END",
			"ASK",
			"LET",
			"NUMERAL",
			"ASSIGN",
			"USER",
			"LBRACKET"
		};
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pDaZbFmq0GXT$6N4amZkFOvWXqT7HqT7HqT52begAbH22b02H41w95W8Ie#6i1GhZ2CRo" +
		"rLs7NYaIBdxxns$4Uera3k9CNMnZ1ACOmZWc4Q0ny2VEOGKKwykNemr7VqRkZDqUVZfuTVJ" +
		"jwT7JlwDMMLUsavUkMdyFKm2SYg2611ny1oeXDp3C9KZGB#IQgZDFiWvMNhdIp5Pf8dgYUz" +
		"03CoWEZOkSyqrEVfmSyCsHzlxwEY1Ng$TtP$sbaL$ktLrnTPTIhTQVB9kOPnVrK8Q$FKbaV" +
		"t7nUGLv5FgV4MwjGm48RsRDBziW#INMUB98bianEo1av8eVacAoGdNmvJiabMILhP9ria1Q" +
		"v8LVad5oGQt9hpeL#YqY$RRoDUGx8fXbl5xwtXgqhpDaQicV8FqMntnelmwUtqVzum6u5VC" +
		"SSn$GHvzNe6qJVKFe3UnhWs0==");

	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}

	public LangParser() {
		super(PARSING_TABLES);
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		switch(rule_num) {
			case 0: // program = exp.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					 return new Program(a);
			}
			case 2: // exp = exp.a MUL factor.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Mul(a, b);
			}
			case 3: // exp = exp.a DIV factor.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Div(a, b);
			}
			case 8: // let = LET binding_list.a IN exp.b END
			{
					final Symbol _symbol_a = _symbols[offset + 2];
					final List a = (List) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 4];
					final Expr b = (Expr) _symbol_b.value;
					 return new Let(a, b);
			}
			case 9: // ask = ASK USER
			{
					 return new Ask(new Opt());
			}
			case 10: // ask = ASK USER LBRACKET exp.a RBRACKET
			{
					final Symbol _symbol_a = _symbols[offset + 4];
					final Expr a = (Expr) _symbol_a.value;
					 return new Ask(new Opt(a));
			}
			case 11: // binding_list = binding.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Binding a = (Binding) _symbol_a.value;
					 return new List().add(a);
			}
			case 12: // binding_list = binding_list.a binding.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final List a = (List) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 2];
					final Binding b = (Binding) _symbol_b.value;
					 return a.add(b);
			}
			case 13: // binding = id_decl.a ASSIGN exp.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final IdDecl a = (IdDecl) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Binding(a, b);
			}
			case 14: // numeral = NUMERAL.num
			{
					final Symbol num = _symbols[offset + 1];
					 return new Numeral(num);
			}
			case 15: // id_decl = ID.id
			{
					final Symbol id = _symbols[offset + 1];
					 return new IdDecl(id);
			}
			case 16: // id_use = ID.id
			{
					final Symbol id = _symbols[offset + 1];
					 return new IdUse(id);
			}
			case 1: // exp = factor
			case 4: // factor = let
			case 5: // factor = ask
			case 6: // factor = numeral
			case 7: // factor = id_use
			{
				return _symbols[offset + 1];
			}
			default:
				throw new IllegalArgumentException("unknown production #" + rule_num);
		}
	}
}
