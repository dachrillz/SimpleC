package lang.ast;

import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "parser.beaver".
 */
public class LangParser extends Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short OD = 1;
		static public final short FI = 2;
		static public final short ID = 3;
		static public final short UNTIL = 4;
		static public final short DO = 5;
		static public final short THEN = 6;
		static public final short NOT = 7;
		static public final short NUMERAL = 8;
		static public final short FOR = 9;
		static public final short ASSIGN = 10;
		static public final short IF = 11;

		static public final String[] NAMES = {
			"EOF",
			"OD",
			"FI",
			"ID",
			"UNTIL",
			"DO",
			"THEN",
			"NOT",
			"NUMERAL",
			"FOR",
			"ASSIGN",
			"IF"
		};
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9nzahrFmp0GnL#QVgP9cvRG50A81HM9YRr829YO488L8LZOO6NZV#QpqFPuPxj96oJyzCl" +
		"T#NosSmc0Ptap4ckH8K63jW8VLTJaLRvKQ5ehdoe4rig72g6rygv2nza4Q#WXilimoW3qNL" +
		"IdtvMvqSnegi8wLwLeOOWDR1c$lV3bHyMwp5QRsHGnyvbyg$xa1XZAH6KoAJRTNe37zuExY" +
		"O#G2bWLyxvztjhcW$oc6bLNejfAvBaef5$FzmdXY#HHYtuxFxbu1kRy21qqq2pvPWNhV5Uj" +
		"ipR$Nwx857i1soymuv1ezH4v9gUc3s3FWJCo8ET4ktH1HkIAN9DzSaCEo1qPatloI6AIaYU" +
		"oOu$2dfx9FskgTXdEpTnzniwUEBkxMCDnwUnekPRZjXG$b68T8R#Zn#uNn7p77h#J$eCHOq" +
		"k57VAusaFo2mBVbKq=");

	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}

	public LangParser() {
		super(PARSING_TABLES);
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		switch(rule_num) {
			case 0: // program = stmt
			case 1: // stmt = forStmt
			case 2: // stmt = ifStmt
			case 3: // stmt = assignment
			case 7: // expr = id
			case 8: // expr = numeral
			case 10: // numeral = NUMERAL
			case 11: // id = ID
			{
				return _symbols[offset + 1];
			}
			case 9: // expr = NOT expr
			{
				return _symbols[offset + 2];
			}
			case 6: // assignment = id ASSIGN expr
			{
				return _symbols[offset + 3];
			}
			case 5: // ifStmt = IF expr THEN stmt FI
			{
				return _symbols[offset + 5];
			}
			case 4: // forStmt = FOR id ASSIGN expr UNTIL expr DO stmt OD
			{
				return _symbols[offset + 9];
			}
			default:
				throw new IllegalArgumentException("unknown production #" + rule_num);
		}
	}
}
