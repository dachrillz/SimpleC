package lang.ast;

import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "parser.beaver".
 */
public class LangParser extends Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short LPAREN = 1;
		static public final short ID = 2;
		static public final short RPAREN = 3;
		static public final short NUMERAL = 4;
		static public final short COMMA = 5;
		static public final short LT = 6;
		static public final short GT = 7;
		static public final short GTE = 8;
		static public final short LTE = 9;
		static public final short EQ = 10;
		static public final short NEQ = 11;
		static public final short SEMICOLON = 12;
		static public final short PLUS = 13;
		static public final short MINUS = 14;
		static public final short INT = 15;
		static public final short MUL = 16;
		static public final short DIV = 17;
		static public final short MOD = 18;
		static public final short IF = 19;
		static public final short WHILE = 20;
		static public final short RETURN = 21;
		static public final short RBRACE = 22;
		static public final short LBRACE = 23;
		static public final short EQUALS = 24;
		static public final short ELSE = 25;

		static public final String[] NAMES = {
			"EOF",
			"LPAREN",
			"ID",
			"RPAREN",
			"NUMERAL",
			"COMMA",
			"LT",
			"GT",
			"GTE",
			"LTE",
			"EQ",
			"NEQ",
			"SEMICOLON",
			"PLUS",
			"MINUS",
			"INT",
			"MUL",
			"DIV",
			"MOD",
			"IF",
			"WHILE",
			"RETURN",
			"RBRACE",
			"LBRACE",
			"EQUALS",
			"ELSE"
		};
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pDLbjlLKKK$cPsJo$KSi1QAtYaBQKNeOWANl02uWKlY5IBuEMXYKPzyC7uf34n6gFnXMY" +
		"GHACnyIVuO8mcFfZe0myy#80Kf5JAdK8lforjkKYNtyoUiy$iipSzHdomNrRNjzQQDMjcxJ" +
		"EpDw3xiGpLSWZFoA4a43Xs0XLo8WbimmrenaevYemSJGALZXr7ZHnF0lDS$X5avKWIsE3O0" +
		"ER9G19usB43s2W7ac1Mo8xXSJcMH5H$49jaC0dqEDQFhTAV1BOvTX3Foi4aM3zaX$6S74u2" +
		"S6m$sVua8k#V8fG4iCpfYfHd1wTlmrBSYaOPnlqo70Uknn8vY#roDWxhFyCzdud3#eUmG8R" +
		"YiFxJM2Ydux3#Krp9gJYi$oJz9#Em$XcBopBZLjua4yHVCe75QALtbLmoKOS9pZ9ZeY5eNS" +
		"8JBhCBT#D9Pjq7O1MUnYBhhPKHuWyZc4y1Ni0ZU01FuHfe6K6xx4M77MCmJSpAjAcDjQmz9" +
		"LEiCMNNCirPOQ8EKsWn5SmOEwwuYfjnYusSatEuXmBv7MsKwv33SjoEDRYJiNtqxpDZB2Pb" +
		"alQahSproxYCqnwtbITDPHDr69S#MdrcZ4LUyhJpKUwOZD4Uixbvbvjt69CBj2wOCHQZCaf" +
		"xj90RzS$aZhhSqH3ittbQvrt$$Au$RyQX2dN#7b6FUwtVz$bTAl06TCR6hCT3YRp74XwVRu" +
		"vPtLwLQpr#eyVNUVn1Zp$gyIqHlobYAoAsEc9tHEmkhu$$YPQBxFX5A0H4XgXabwjHmxkib" +
		"h$WEindvGLOo7q6oAR6THHlIOshADwS6c#CuhfCVcDgl3cAgpBpbwkV7c#zolsNcL#a42UR" +
		"CyxdDLT$idFaBkPlCyTVMS0tLDeSuTDFywVlEQ1EzrzX$lIzNT4FxahpVqMqye9jT9OQ$5$" +
		"FKzd0MpxBMHOLRLfPseNC9MWoMVHMyEiaz7RQUHGzTeUCBOrcww0du5dFH1w$TX1gEvjRYw" +
		"qNhSLLADZ#Aa9kijfiLi0xAhxxhEk8LxbGgLI7bMaLA$yVSltzjjfnxUnw$0a7rk$xabqol" +
		"AriNj8JpuXRwLMkXlzJDaS$$vKEEmwy#BvzRTdpi9U7PXDrZhAICilMp59tqDy3w2pr6nI#" +
		"wTJRz6#WhgDyGjdA#7BgpobVCSPl0$MRFMDG$6xadg56E6ODDRzOS9cyrhv7eEkfrrEss6S" +
		"1zHdb8zgzZ7rB$WlbH$Blg6levnhq3zJlKJwbV4FXEFqJumtKFrEtKFzApNsejOmRto2rMT" +
		"C0Oxif6#dxdlPcyZsKRd9#MoXol4IROxNvRjXEduczHiqUQQvB3L4R$Yevzwgh6F#GtFJhQ" +
		"zhieNg7$0jgpg7vBQLsXhrMlTpciEkx3hMkTdQz6zDj#cDugPWrURpBvVMvFFSyTQ$Jxph$" +
		"QgTtnETIkxovsZt#WJVcovGrVEpq3gTtfgtLnLufiLztQrxd#TvqlXwdNox9UIjkep27jqx" +
		"iAXbZ$hfu3ol#Weretj6Lb0nl54K9#6RMVAS6l5#CP2WLJXkfecWRCxTz9taJUReedj70YR" +
		"BloQ8edkE0edYQYz92oR5UpjxYYXBmlb9OyJT#I#s9");

	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}

	public LangParser() {
		super(PARSING_TABLES);
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		switch(rule_num) {
			case 0: // program = programlist.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final List a = (List) _symbol_a.value;
					 return new Program(a);
			}
			case 1: // programlist = function.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Function a = (Function) _symbol_a.value;
					 return new List().add(a);
			}
			case 2: // programlist = programlist.a function.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final List a = (List) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 2];
					final Function b = (Function) _symbol_b.value;
					 return a.add(b);
			}
			case 3: // function = INT vardecl.id LPAREN functionarguments.arg RPAREN block.sl
			{
					final Symbol _symbol_id = _symbols[offset + 2];
					final VarDecl id = (VarDecl) _symbol_id.value;
					final Symbol _symbol_arg = _symbols[offset + 4];
					final List arg = (List) _symbol_arg.value;
					final Symbol _symbol_sl = _symbols[offset + 6];
					final Block sl = (Block) _symbol_sl.value;
					 return new Function(id, arg, sl);
			}
			case 4: // function = INT vardecl.id LPAREN RPAREN block.sl
			{
					final Symbol _symbol_id = _symbols[offset + 2];
					final VarDecl id = (VarDecl) _symbol_id.value;
					final Symbol _symbol_sl = _symbols[offset + 5];
					final Block sl = (Block) _symbol_sl.value;
					 return new Function(id, new List(), sl);
			}
			case 5: // functionarguments = functionargument.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final VarDecl a = (VarDecl) _symbol_a.value;
					 return new List().add(a);
			}
			case 6: // functionarguments = functionarguments.a COMMA functionargument.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final List a = (List) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final VarDecl b = (VarDecl) _symbol_b.value;
					 return a.add(b);
			}
			case 7: // functionargument = INT vardecl.a
			{
					final Symbol _symbol_a = _symbols[offset + 2];
					final VarDecl a = (VarDecl) _symbol_a.value;
					 return a;
			}
			case 8: // block = LBRACE statementlist.a RBRACE
			{
					final Symbol _symbol_a = _symbols[offset + 2];
					final List a = (List) _symbol_a.value;
					 return new Block(a);
			}
			case 9: // statement = INT ID.a SEMICOLON
			{
					final Symbol a = _symbols[offset + 2];
					 return new IdDecl(a);
			}
			case 10: // statement = INT ID.a EQUALS expr.b SEMICOLON
			{
					final Symbol a = _symbols[offset + 2];
					final Symbol _symbol_b = _symbols[offset + 4];
					final Expr b = (Expr) _symbol_b.value;
					 return new IdDeclAndUse(a,b);
			}
			case 11: // statement = ID.a EQUALS expr.b SEMICOLON
			{
					final Symbol a = _symbols[offset + 1];
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new IdUse(a, b);
			}
			case 12: // statement = WHILE LPAREN expr.a RPAREN block.b
			{
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final Block b = (Block) _symbol_b.value;
					 return new While(a,b);
			}
			case 13: // statement = IF LPAREN expr.a RPAREN block.b
			{
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final Block b = (Block) _symbol_b.value;
					 return new If(a,b);
			}
			case 14: // statement = IF LPAREN expr.a RPAREN block.b ELSE block.c
			{
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final Block b = (Block) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 7];
					final Block c = (Block) _symbol_c.value;
					 return new IfElse(a,b,c);
			}
			case 15: // statement = expr.a SEMICOLON
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					 return new ExpressionStatement(a);
			}
			case 16: // statement = RETURN expr.a SEMICOLON
			{
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expr a = (Expr) _symbol_a.value;
					 return new Return(a);
			}
			case 17: // statementlist = statement.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Statement a = (Statement) _symbol_a.value;
					 return new List().add(a);
			}
			case 18: // statementlist = statementlist.a statement.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final List a = (List) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 2];
					final Statement b = (Statement) _symbol_b.value;
					 return a.add(b);
			}
			case 19: // expr = expr.a LT arexpr.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new LT(a,b);
			}
			case 20: // expr = expr.a GT arexpr.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new GT(a,b);
			}
			case 21: // expr = expr.a GTE arexpr.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new GTE(a,b);
			}
			case 22: // expr = expr.a LTE arexpr.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new LTE(a,b);
			}
			case 23: // expr = expr.a EQ arexpr.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new EQ(a,b);
			}
			case 24: // expr = expr.a NEQ arexpr.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new NEQ(a,b);
			}
			case 25: // expr = arexpr.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					 return a;
			}
			case 26: // arexpr = arexpr.a PLUS term.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Plus(a,b);
			}
			case 27: // arexpr = arexpr.a MINUS term.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Minus(a,b);
			}
			case 28: // arexpr = term.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					 return a;
			}
			case 29: // term = term.a MUL factor.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Mul(a,b);
			}
			case 30: // term = term.a DIV factor.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Div(a,b);
			}
			case 31: // term = term.a MOD factor.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Mod(a,b);
			}
			case 32: // term = factor.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					 return a;
			}
			case 33: // factor = LPAREN expr.a RPAREN
			{
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expr a = (Expr) _symbol_a.value;
					 return a;
			}
			case 34: // factor = op.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					 return a;
			}
			case 35: // op = ID.id
			{
					final Symbol id = _symbols[offset + 1];
					 return new Var(id);
			}
			case 36: // op = NUMERAL.a
			{
					final Symbol a = _symbols[offset + 1];
					 return new Numeral(a);
			}
			case 37: // op = functioncall.a
			{
					final Symbol a = _symbols[offset + 1];
					 return a;
			}
			case 38: // vardecl = ID.id
			{
					final Symbol id = _symbols[offset + 1];
					 return new VarDecl(id);
			}
			case 39: // functioncall = ID.a LPAREN argumentcalls.args RPAREN
			{
					final Symbol a = _symbols[offset + 1];
					final Symbol _symbol_args = _symbols[offset + 3];
					final List args = (List) _symbol_args.value;
					 return new FuncCall(a, args);
			}
			case 40: // functioncall = ID.a LPAREN RPAREN
			{
					final Symbol a = _symbols[offset + 1];
					 return new FuncCall(a, new List());
			}
			case 41: // argumentcalls = argumentcall.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					 return new List().add(a);
			}
			case 42: // argumentcalls = argumentcalls.a COMMA argumentcall.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final List a = (List) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return a.add(b);
			}
			case 43: // argumentcall = expr.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					 return a;
			}
			default:
				throw new IllegalArgumentException("unknown production #" + rule_num);
		}
	}
}
