package lang.ast;

import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "parser.beaver".
 */
public class LangParser extends Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short LPAREN = 1;
		static public final short ID = 2;
		static public final short RPAREN = 3;
		static public final short NUMERAL = 4;
		static public final short LT = 5;
		static public final short GT = 6;
		static public final short GTE = 7;
		static public final short LTE = 8;
		static public final short EQ = 9;
		static public final short NEQ = 10;
		static public final short COMMA = 11;
		static public final short SEMICOLON = 12;
		static public final short PLUS = 13;
		static public final short MINUS = 14;
		static public final short INT = 15;
		static public final short MUL = 16;
		static public final short DIV = 17;
		static public final short MOD = 18;
		static public final short IF = 19;
		static public final short WHILE = 20;
		static public final short RETURN = 21;
		static public final short RBRACE = 22;
		static public final short LBRACE = 23;
		static public final short EQUALS = 24;
		static public final short ELSE = 25;

		static public final String[] NAMES = {
			"EOF",
			"LPAREN",
			"ID",
			"RPAREN",
			"NUMERAL",
			"LT",
			"GT",
			"GTE",
			"LTE",
			"EQ",
			"NEQ",
			"COMMA",
			"SEMICOLON",
			"PLUS",
			"MINUS",
			"INT",
			"MUL",
			"DIV",
			"MOD",
			"IF",
			"WHILE",
			"RETURN",
			"RBRACE",
			"LBRACE",
			"EQUALS",
			"ELSE"
		};
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9p5Laji5LKO$iuTsz87N8hKIgsqlIsjlAo0BnHHy0qAbQA2qU12LoO#eWakI0GNRZHgD77" +
		"XnhqncXYZYGj8N13ZGXC3bGBbKLu5MlgyhG$Qt##SUsRkEJFJ1ep6#VBVx$jVSywSEtDcWC" +
		"m1jE0QEOf0ZYQ14glEe5JE984AN8z6B9TUb4jl4iXQTHhhv7GIKVz9F20day13LlMWGdgIm" +
		"ADMTJFVdGGsMdKAM#LK4kYquv$0at8Y2Pwre8xWQJcI163LOQh3IKJHurJ7auYYXwWE9H55" +
		"Zr4TIm8jLhd$sJRBPPPN88TRK2lzk4VwVU0wB9IBU4ek#Z3n2rop2pvC$3pcodaV9jw7Qkd" +
		"pOUBdEFTpFapyBEDdVPZuX878X9rvWumGapA2EZGpsWxmZfsm6C4i$awQ6eAvBTXWEvVXJZ" +
		"p6I1tMu0dsiH#LQ9S16U3O0yQVeyydb$4WxiCcL36wGFVg6eDnuhACczhLxCrBdlLvCvTnC" +
		"nUO6eqycanllW1d5ejDtPYCuIuQv20MOJxgiGGhSIjkbuECtcnwnon6PHJRQNhS3CST9Wx8" +
		"i1btbEEsIfUkCHZcoTle3riCoH3763AzOE#W3D8VDBr3z7#JFtIDWSveVz3Y4l6NN0fxzTh" +
		"9L67j66sNttMs0AuTw4$PjVFNN1#ptMl4tRZMyztL2KUxoQku7$Tw$YEiSNrN0u$7$0vdX7" +
		"cEli7HQnsztj4FEtfpf6iYTMEabaPgLQHkYzGTpZfU5SkVy0xw2ba4lCDAK8eop48vTyzAL" +
		"76Lv$0EcOjgNcN0ghHyRPHl$4$wLPIlJSqtNd4#cvhFHVdCFvcVI9Yd#X$oqVgukPpDjTfS" +
		"7U$CUjvP0Tz9QUS8YFHu#fe5vFJuDEUVPkxJnS6hokYzE9fvw6lESeyM$kfdleRxkhvt5nH" +
		"zvYhfXvqBkSkBwMks$Mq5PjGz7vpp5Nf3tzOO3j9wwKtNwyt2pgF5Z1TmH$AlFMtS9ZlE8i" +
		"kBY#EQVoqQrrnrfTiRpZ7ELz8RhdNK0wyt6#iD$TZLCjViNMFyld7gez5QPko8tp6EPgOgu" +
		"RiZ$3lwwjKC$yMC78XtS9s1PtRh7LlqruZQIEkaMqMRHvkY$novZFmsaE5pf5wbyTsctcHy" +
		"6NasxNtQLkRvvQ0#eRt17D$pQXSvI$wKt43#cJKho5tq9ydzvYq2nQyClZs1pMPMK1$H#3s" +
		"97QoleEwcVKVDEQbonb#XNaT#Y$O1xJFQLunzoNmD#Mjo4$bRydBQQkRtaSV9lz1wcFkUjf" +
		"wnR#YlfDvBsw2$JHZxoRoXaVc1jeLw3MCTP7uhg5yPsqRk8##dFK$DBvXCAVClK4#Gzz2VJ" +
		"zv9vdmpFzAgTvjte$g2bzYhTMWyzbiER4s7lcwtfbYRwNJqJjlNPVjUjl7jbdVP#2hBx$dd" +
		"KXyxvyevUezJytdA7Dwn$Axb3zFcQdCxOlwBTixDJkmb6rjhULEivpNVnxCn$$MOhu#btDa" +
		"KTpbjUjShDLyZhVHRkGVa66iaDnihCJjvWRMLcUzOdMjZVHjr0tMwAJwFWJLbteX5Ktnc0v" +
		"hYarkqUevLRtPhHGkuFoai#HiJdE00");

	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}

	public LangParser() {
		super(PARSING_TABLES);
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		switch(rule_num) {
			case 0: // program = programlist.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final List a = (List) _symbol_a.value;
					 return new Program(a);
			}
			case 1: // programlist = function.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Function a = (Function) _symbol_a.value;
					 return new List().add(a);
			}
			case 2: // programlist = programlist.a function.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final List a = (List) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 2];
					final Function b = (Function) _symbol_b.value;
					 return a.add(b);
			}
			case 3: // function = INT ID.id LPAREN functionarguments.arg RPAREN block.sl
			{
					final Symbol id = _symbols[offset + 2];
					final Symbol _symbol_arg = _symbols[offset + 4];
					final List arg = (List) _symbol_arg.value;
					final Symbol _symbol_sl = _symbols[offset + 6];
					final Block sl = (Block) _symbol_sl.value;
					 return new Function(id, arg, sl);
			}
			case 4: // function = INT ID.id LPAREN RPAREN block.sl
			{
					final Symbol id = _symbols[offset + 2];
					final Symbol _symbol_sl = _symbols[offset + 5];
					final Block sl = (Block) _symbol_sl.value;
					 return new Function(id, new List(), sl);
			}
			case 5: // functionarguments = functionargument.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final ASTNode a = (ASTNode) _symbol_a.value;
					 return new List().add(a);
			}
			case 6: // functionarguments = functionarguments.a COMMA functionargument.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final List a = (List) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final ASTNode b = (ASTNode) _symbol_b.value;
					 return a.add(b);
			}
			case 7: // functionargument = INT ID.a
			{
					final Symbol a = _symbols[offset + 2];
					 return new Var(a);
			}
			case 8: // block = LBRACE statementlist.a RBRACE
			{
					final Symbol _symbol_a = _symbols[offset + 2];
					final List a = (List) _symbol_a.value;
					 return new Block(a);
			}
			case 9: // statement = INT ID.a SEMICOLON
			{
					final Symbol a = _symbols[offset + 2];
					 return new IdDecl(a);
			}
			case 10: // statement = INT ID.a EQUALS expr.b SEMICOLON
			{
					final Symbol a = _symbols[offset + 2];
					final Symbol _symbol_b = _symbols[offset + 4];
					final Expr b = (Expr) _symbol_b.value;
					 return new IdDeclAndUse(a,b);
			}
			case 11: // statement = ID.a EQUALS expr.b SEMICOLON
			{
					final Symbol a = _symbols[offset + 1];
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new IdUse(a, b);
			}
			case 12: // statement = WHILE LPAREN expr.a RPAREN block.b
			{
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final Block b = (Block) _symbol_b.value;
					 return new While(a,b);
			}
			case 13: // statement = IF LPAREN expr.a RPAREN block.b
			{
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final Block b = (Block) _symbol_b.value;
					 return new If(a,b);
			}
			case 14: // statement = IF LPAREN expr.a RPAREN block.b ELSE block.c
			{
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final Block b = (Block) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 7];
					final Block c = (Block) _symbol_c.value;
					 return new IfElse(a,b,c);
			}
			case 15: // statement = expr.a SEMICOLON
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					 return new ExpressionStatement(a);
			}
			case 16: // statement = RETURN expr.a SEMICOLON
			{
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expr a = (Expr) _symbol_a.value;
					 return new Return(a);
			}
			case 17: // statementlist = statement.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Statement a = (Statement) _symbol_a.value;
					 return new List().add(a);
			}
			case 18: // statementlist = statementlist.a statement.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final List a = (List) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 2];
					final Statement b = (Statement) _symbol_b.value;
					 return a.add(b);
			}
			case 19: // expr = expr.a LT arexpr.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new LT(a,b);
			}
			case 20: // expr = expr.a GT arexpr.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new GT(a,b);
			}
			case 21: // expr = expr.a GTE arexpr.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new GTE(a,b);
			}
			case 22: // expr = expr.a LTE arexpr.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new LTE(a,b);
			}
			case 23: // expr = expr.a EQ arexpr.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new EQ(a,b);
			}
			case 24: // expr = expr.a NEQ arexpr.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new NEQ(a,b);
			}
			case 25: // expr = arexpr.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					 return a;
			}
			case 26: // arexpr = arexpr.a PLUS term.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Plus(a,b);
			}
			case 27: // arexpr = arexpr.a MINUS term.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Minus(a,b);
			}
			case 28: // arexpr = term.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					 return a;
			}
			case 29: // term = term.a MUL factor.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Mul(a,b);
			}
			case 30: // term = term.a DIV factor.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Div(a,b);
			}
			case 31: // term = term.a MOD factor.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Mod(a,b);
			}
			case 32: // term = factor.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					 return a;
			}
			case 33: // factor = LPAREN expr.a RPAREN
			{
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expr a = (Expr) _symbol_a.value;
					 return a;
			}
			case 34: // factor = op.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					 return a;
			}
			case 35: // op = ID.a
			{
					final Symbol a = _symbols[offset + 1];
					 return new Var(a);
			}
			case 36: // op = NUMERAL.a
			{
					final Symbol a = _symbols[offset + 1];
					 return new Numeral(a);
			}
			case 37: // op = functioncall.a
			{
					final Symbol a = _symbols[offset + 1];
					 return a;
			}
			case 38: // functioncall = ID.a LPAREN argumentcalls.args RPAREN
			{
					final Symbol a = _symbols[offset + 1];
					final Symbol _symbol_args = _symbols[offset + 3];
					final List args = (List) _symbol_args.value;
					 return new FuncCall(a, args);
			}
			case 39: // functioncall = ID.a LPAREN RPAREN
			{
					final Symbol a = _symbols[offset + 1];
					 return new FuncCall(a, new List());
			}
			case 40: // argumentcalls = argumentcall.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					 return new List().add(a);
			}
			case 41: // argumentcalls = argumentcalls.a COMMA argumentcall.b
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final List a = (List) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return a.add(b);
			}
			case 42: // argumentcall = expr.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					 return a;
			}
			default:
				throw new IllegalArgumentException("unknown production #" + rule_num);
		}
	}
}
