aspect MinValue {
	// Exercise 1
	syn int Node.localMin() = 0;
	eq Leaf.localMin() = getNumber();
	eq Pair.localMin(){
		int left = getLeft().localMin();
		int right = getRight().localMin();
		if (left < right) {
			return left;
		}
		else{
			return right;
		}
	}

	// Exercise 2
	inh int Node.globalMin();
	eq Program.getNode().globalMin() = getNode().localMin();
	
	// Exercise 3
	syn boolean Leaf.isMinValue() = getNumber() == globalMin();
	
	// Exercise 4
	syn int Program.nbrOfMinValues() = getNode().nbrOfMinValues();
	syn int Node.nbrOfMinValues() {
            if(getNumChild() > 0){
                int sum = 0;
                for(ASTNode ast : astChildren()){
                    sum += ((Node) ast).nbrOfMinValues(); 
                }
                return sum;
            }
            
			if (localMin() == globalMin()){
				return 1;
			}
			else{
				return 0;
			}
        }
}
